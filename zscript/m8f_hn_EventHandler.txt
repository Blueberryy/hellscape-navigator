/* Copyright Alexander Kromm (mmaulwurff@gmail.com) 2018
 *
 * This file is part of Hellscape Navigator.
 *
 * Hellscape Navigator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Hellscape Navigator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Hellscape Navigator.  If not, see <https://www.gnu.org/licenses/>.
 */

class m8f_hn_Data
{
  Array<Sector>  secretSectors;
  Array<int>     itemAreaPosX;
  Array<int>     itemAreaPosY;
  Array<int>     itemAreaPosZ;
  Array<string>  itemAreaNames;
  Array<string>  areaItems;
  Array<Actor>   areaNameMarkers;

  Array<m8f_hn_Pointer> pointers;
  int pointerId;

  m8f_hn_Data init()
  {
    int nSectors = level.sectors.size();
    for (int i = 0; i < nSectors; ++i)
      {
        Sector s        = level.sectors[i];
        bool   isSecret = (s.Flags & (Sector.SECF_SECRET | Sector.SECF_WASSECRET));
        if (isSecret)
          {
            secretSectors.push(s);
          }
      }

    areaItems.push("Key");
    areaItems.push("Weapon"); // weapons
    areaItems.push("Goonades");
    areaItems.push("SPAMMineItem");
    areaItems.push("PowerupGiver"); // powerups
    areaItems.push("MegaSphere");
    areaItems.push("SoulSphere");
    areaItems.push("GreenArmor");
    areaItems.push("BlueArmor");
    areaItems.push("TBPowerupBase");
    areaItems.push("MapRevealer");
    areaItems.push("Berserk");
    areaItems.push("Speeders");
    areaItems.push("IcarusMk8");
    areaItems.push("ProtectoBand");
    areaItems.push("BigSPAMMine");
    areaItems.push("GuardBoi");
    areaItems.push("BadassGlasses");
    areaItems.push("Mapisto");
    areaItems.push("LovebirdTag");
    areaItems.push("BigScorePresent");
    areaItems.push("BackpackItem"); // backpacks
    areaItems.push("Backpack2");
    areaItems.push("BlueprintItem");
    areaItems.push("NetronianBackpack");
    areaItems.push("Big_Coin_pickup"); // other

    pointerId = 0;

    return self;
  }
}

class m8f_hn_EventHandler : EventHandler
{
  Array<m8f_hn_BaseAreaNameSource> areaNameSources;
  m8f_hn_Data data;
  m8f_hn_Settings settings;

  int     renderUpdatePeriod;
  int     renderCounter;
  string  areaName;
  bool    isTitlemap;

  bool    _isFirstTick;
  bool    _isWorldLoaded;

  // returns unique pointer id
  int AddPointer(double x, double y, int type)
  {
    ++data.pointerId;
    data.pointers.push(new("m8f_hn_Pointer").init(x, y, type, data.pointerId));

    return data.pointerId;
  }

  void RemovePointer(int id)
  {
    int nPointers = data.pointers.size();
    for (int i = 0; i < nPointers; ++i)
      {
        if (data.pointers[i].id() == id)
          {
            data.pointers.delete(i);
            break;
          }
      }
  }

  override void OnRegister()
  {
    areaNameSources.push(new("m8f_hn_SignAreaNameSource"));
    areaNameSources.push(new("m8f_hn_PlayerStartNameSource"));
    areaNameSources.push(new("m8f_hn_ItemAreaNameSource"));
    areaNameSources.push(new("m8f_hn_SectorAreaNameSource"));
    areaNameSources.push(new("m8f_hn_BaseAreaNameSource"));

    renderUpdatePeriod = 20;
    renderCounter      =  0;
    areaName           = "";

    _isWorldLoaded = false;
    _isFirstTick   = true;
  }

  override void WorldLoaded(WorldEvent e)
  {
    data       = new("m8f_hn_Data").init();
    isTitlemap = CheckTitlemap();
    settings   = new("m8f_hn_Settings").init(players[consolePlayer]);
  }

  override void WorldTick()
  {
    if (!_isFirstTick) { _isWorldLoaded = true; }
    _isFirstTick = false;
  }

  override void WorldThingSpawned(WorldEvent e)
  {
    if (e == null)     { return; }

    Actor item = e.thing;
    if (item == null) { return; }

    // detect and store area name markers
    string spawnedClassName = item.GetClassName();
    bool   isAreaNameMarker = (spawnedClassName.IndexOf("hn_AreaNameMarker") != -1);
    if (isAreaNameMarker)
      {
        data.areaNameMarkers.push(item);
      }

    if (_isWorldLoaded) { return; }

    Inventory inv = Inventory(item);
    if (inv && inv.owner) { return; }

    int nAreaItems = data.areaItems.size();

    for (int i = 0; i < nAreaItems; ++i)
      {
        if (!(item is data.areaItems[i])) { continue; }

        data.itemAreaPosX.push(item.pos.x);
        data.itemAreaPosY.push(item.pos.y);
        data.itemAreaPosZ.push(item.pos.z);
        data.itemAreaNames.push(item.GetTag());
      }
  }

  override void NetworkProcess(ConsoleEvent event)
  {
    if      (event.name == "m8f_hn_remove_signs")     { removeSigns();     }
    else if (event.name == "m8f_hn_remove_decals")    { removeDecals();    }
  }

  static void removeSigns()
  {
    let   iterator = ThinkerIterator.Create("m8f_hn_Sign");
    Actor sign;
    while (sign = Actor(iterator.Next()))
      {
        sign.Destroy();
      }
  }

  static void removeDecals()
  {
    let     iterator = ThinkerIterator.Create("Thinker", Thinker.STAT_DECAL);
    Thinker dec;
    while (dec = iterator.Next())
      {
        dec.Destroy();
      }
  }

  ui string GetAreaName(m8f_hn_Data data)
  {
    string areaName = "no area name sources found";
    int    size     = areaNameSources.size();
    for (int i = 0; i < size; ++i)
      {
        let areaNameSource = areaNameSources[i];
        if (settings.hideAutoAreaNames && areaNameSource.IsAutomatic())
          {
            continue;
          }

        areaName = areaNameSource.GetAreaName(data);
        if (areaName.Length() != 0) { break; }
      }
    return areaName;
  }

  play void SetRenderCounter(int value) const
  {
    renderCounter = value;
  }

  play void SetAreaName(string name) const
  {
    areaName = name;
  }

  bool CheckTitlemap()
  {
    bool isTitlemap = (level.mapname == "TITLEMAP");
    return isTitlemap;
  }

  override void RenderOverlay(RenderEvent e)
  {
    if (isTitlemap) { return; }
    if (automapActive && !settings.showOnAutomap) { return; }

    PlayerInfo player              = players[consolePlayer];
    int        optionsUpdatePeriod =
      CVar.GetCVar("m8f_hn_update_period", player).GetInt();

    if (optionsUpdatePeriod == 0) { settings.read(player); }
    else if (optionsUpdatePeriod != -1
             && (level.time % optionsUpdatePeriod) == 0)
      {
        settings.read(player);
      }

    if (renderCounter >= renderUpdatePeriod)
      {
        SetAreaName(GetAreaName(data));
        SetRenderCounter(0);
      }
    else { SetRenderCounter(renderCounter + 1); }

    Font    font        = Font.GetFont("SMALLFONT");
    int     normalcolor = Font.CR_GRAY;
    double  x           = settings.xStart;
    double  y           = settings.yStart;
    double  scale       = 1.0 / settings.compassScale;
    vector3 pos         = player.mo.pos;
    double  playerAngle = player.mo.angle;

    if (settings.showCompass)
    {
      y += drawCompass(x, y, scale, settings.compassStyle, data, pos, playerAngle);
    }

    if (settings.levelName)
      {
        y += drawTextCenter(level.levelName, normalColor, scale, x, y, font);
      }

    if (settings.showAreaName && areaName.length() != 0)
      {
        y += drawTextCenter(areaName, normalColor, scale, x, y, font);
      }

    if (settings.showGridCoords)
      {
        string  coords = makeGridCoordinates(pos);
        y += drawTextCenter(coords, normalColor, scale, x, y, font);
      }
  }

  // What a mess.
  ui static double drawCompass( double relativeX, double y, double scale, int style
                              , m8f_hn_Data data, vector3 center, double angle)
  {
    static const string ribbons[] =
      {
        "hncmpr1",
        "hncmpr2"
      };
    static const string borders[] =
      {
        "hncmpb1",
        "hncmpb2"
      };

    int    width     = scale * Screen.GetWidth();
    int    height    = scale * Screen.GetHeight();
    double scaledY   = int(y * height);

    double    x      = width * relativeX;
    double    compX  = x - 102.0 / 2.0;
    double    angle  = players[consolePlayer].mo.angle % 360.0;
    TextureID eswn   = TexMan.CheckForTexture(ribbons[style], TexMan.Type_Any);
    TextureID border = TexMan.CheckForTexture(borders[style], TexMan.Type_Any);
    double    xStart = (270.0 - angle) * 150.0 / 270.0 + 56.0;
    if      (compX < 0.0)           { compX = 0.0; }
    else if (compX > width - 102.0) { compX = width - 102.0; }

    int clipRectWidth  = 102 / scale;
    int clipRectHeight = 15;
    int clipRectX      = 1 + (Screen.GetWidth()  * relativeX) - clipRectWidth / 2.0;
    int clipRectY      = Screen.GetHeight() * y;
    int maxClipRectX   = Screen.GetWidth() - clipRectWidth;
    if (clipRectX > maxClipRectX) { clipRectX = maxClipRectX; }

    // I no longer know what's happening with clip height here.
    Screen.SetClipRect( clipRectX
                      , clipRectY
                      , clipRectWidth - 1
                      , (clipRectHeight + 1.5) / scale
                      );

    Screen.DrawTexture( eswn, false, compX - xStart + 1.0, scaledY + 1
                      , DTA_KeepRatio,     true
                      , DTA_VirtualWidth,  width
                      , DTA_VirtualHeight, height
                      );

    drawPointers(compX, scaledY + 1, width, height
                , data, center, angle
                );

    Screen.ClearClipRect();
    double borderX = compX   - 4;
    double borderY = scaledY - 4;
    Screen.DrawTexture( border, false, borderX, borderY
                      , DTA_KeepRatio,     true
                      , DTA_VirtualWidth,  width
                      , DTA_VirtualHeight, height
                      );


    return (clipRectHeight / scale) * 1.4 / Screen.GetHeight();
  }

  ui static string makeGridCoordinates(vector3 pos)
  {
    int     x        = pos.x;
    int     y        = pos.y;
    int     gridSize = 512;
    if (x < 0) { x -= gridSize; }
    if (y < 0) { y -= gridSize; }
    string  xString  = intToStringAA(x / gridSize);
    y                = (y + 64) / gridSize;
    string  coords   = StringStruct.Format("%s %d", xString, y);
    return coords;
  }

  ui static string intToStringAA(int value)
  {
    if (value == 0) { return "A"; }

    bool negative;
    if (value >= 0) { negative = false;}
    else            { negative = true; value = -value - 1; }

    string result = "";
    while (true)
      {
        int small = value % 26;
        result    = StringStruct.Format("%c%s", 65 + small, result);
        value    /= 26;

        if (value == 0) break;
        --value;
      }

    if (negative) { result = StringStruct.Format("-%s", result); }

    return result;
  }

  ui static double drawTextCenter( string text
                                 , int    color
                                 , double scale
                                 , double x
                                 , double y
                                 , Font   font
                                 , int    xAdjustment = 0
                                 )
  {
    int    width       = scale * Screen.GetWidth();
    int    height      = scale * Screen.GetHeight();
    double stringWidth = font.StringWidth(text);
    x  = (width * x) - stringWidth / 2;
    y *= height;
    if (x < 0.0) { x = 0.0; }
    else if (x > width - stringWidth) { x = width - stringWidth; }

    Screen.DrawText( font, color, x, y, text
                   , DTA_KeepRatio,     true
                   , DTA_VirtualWidth,  width
                   , DTA_VirtualHeight, height
                   );

    return (font.GetHeight() / scale) / Screen.GetHeight();
  }

  ui static void drawPointers( double x, double y, int width, int height
                             , m8f_hn_Data data, vector3 center, double playerAngle)
  {
    static const string pointerTextures[] =
      {
        "hn_compass_pointer1",
        "hn_compass_pointer2",
        "hn_compass_pointer3",
        "hn_compass_pointer4",
        "hn_compass_pointer5",
        "hn_compass_pointer6"
      };

    int nPointers = data.pointers.size();
    for (int i = 0; i < nPointers; ++i)
      {
        double xPointer = data.pointers[i].x();
        double yPointer = data.pointers[i].y();
        int    type     = data.pointers[i].type();
        TextureID pointerTex = TexMan.CheckForTexture(pointerTextures[type], TexMan.Type_Any);

        double xDiff    = xPointer - center.x;
        double yDiff    = yPointer - center.y;
        double angle;
        if      (yDiff > 0.0) { angle = atan(xDiff / yDiff) +  90.0; }
        else if (yDiff < 0.0) { angle = atan(xDiff / yDiff) + 270.0; }
        else if (xDiff < 0.0) { angle =   0.0; }
        else if (xDiff > 0.0) { angle = 180.0; }
        else                  { angle =  90.0; }

        angle         = (angle + playerAngle - 90.0) % 360.0;
        double xStart = angle * 150.0 / 270.0;

        double distance = xDiff * xDiff + yDiff * yDiff;
        double step     = 500000.0;
        double steps    = distance / step;
        double yOffset  = 3 + steps;        //  3 - minimum
        if (yOffset > 11) { yOffset = 11; } // 11 - maximum

        Screen.DrawTexture( pointerTex, false, x + xStart, y + yOffset
                            , DTA_KeepRatio,     true
                            , DTA_VirtualWidth,  width
                            , DTA_VirtualHeight, height
                            );
      }

  }

} // m8f_hn_EventHandler
